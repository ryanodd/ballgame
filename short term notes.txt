//////////////////
HIGH PRIORITY
//////////////////

- game end conditions: time, but allow unlimited. leave design room for first-to-X
- victory screen
- pause menu
	- need to be able to destroy an existing game...
		- would the old game be garbage collected? Those requestAnimationFRames are gonna keep going
			- maybe throw an error to stop it or something?

- lazy controls tutorial graphic

- resource meters!
	- enforce
	- refill over time
	- display

- DEPLOY
	- Amplify
	- point domain to it

//////////////////
MEDIUM PRIORITY
//////////////////

- REFACTOR
	- character abilities can be more standardized.
		- mostRecentUse 
		- cooldowns
		- bufferable
		- resource meter
		- serialization

- goal animation

- crunchy animations:
	- contacts should probably glow (lighting on walls & objects) & spark (particle effects)
	- screen shake?

- display netplay stats (with polling intervals, perchance)
	- try testing without polling intervals

- curved walls
	- just jack up the border-radius on a hollow rectangle? is that possible?
	- polylines or https://rapier.rs/docs/user_guides/javascript/colliders/#heightfields
	- research: HTML canvas drawing methods for this

- combine control stick inputs and keyboard WASD inputs more automatically

- control config menu
	- can maybe be extended to be a HUD tutorial display as well
	- eventually should have specialized instructions for each bindable control for each character.
	- localStorage??

- think about name

- research: deal with stalling better
	- for one, we could display netplay errors & prompt a restart
	- game should not stall... at all. ie the clock should just keep ticking while stalled
	- ^ maybe only possible with authoratative server..
		-BUT what would it even look like to NOT stall on a server?
			- I promised myself it would be an easy p2p->sever port
				- therefore it must be easy to do p2p stall handling assuming host's machine doesn't stall..

- cpu players

- sentry reporting

//////////////////
LOW PRIORITY
//////////////////

- matchmaking server w/ rooms
- think about: character,stage,cpu select
	- COULD I INCORPORATE PHYSICS TWEAKING IN HERE SOMEHOW
- multiplayer hash as myGame param
	- requires some refactoring.
	- would allow joining game differently (via pause menu)
- convert to simpler configged inputs BEFORE input serialization
	- no reason to at the moment? How costly is it.
	- is there actually any advantage?
		- yeah cuz rn we need both clients to know each others' input config & apply it after deserialization
			- that's whack.
- small input delay
	- https://github.com/rameshvarun/netplayjs/issues/27
- research: how bad is p2p.
	- is it exploitable in any way? Does the host have an advantage?
		- theoretically. But it would be hard to do in a subtle way
		- redux dev config would be a funny backdoor 
	- are there any actual advantages to the server-of-truth approach?
	- how difficult would it be to port to server-of-truth?
	- what is the tech debt of sticking with p2p? methinks not very high?

