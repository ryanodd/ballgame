//////////////////
HIGH PRIORITY
//////////////////

- CONTROLS tutorial/reference
	- dependent on character AND gamepad/keyboard
	- customizable
	- explain abilities - maybe even show them with mini-canvas or images
	- list costs
	- very closely tied to character select screen I think. Which isn't figured out.
	- When to choose characters?
		- (a) Before finding opponent
		- (b) After finding opponent
		- (c) one of the above AND during game - between goals?
	- When to be able to customize controls?
		- probably at main menu only
	- Will controls be global? Or need to be set for each character?
		- I can imagine some characters needing TWO directional inputs.
		- For spaceship, keyboard directional input will be two buttons instead of gamepad stick?
	- regardless, we still NEED a way to see controls in-game
		- (a) single special keyboard key to see controls for all players?
		- click/hover button in CharacterHud to show popover

- DEPLOY
	- Amplify
	- point domain to it

//////////////////
MEDIUM PRIORITY
//////////////////

- event when someone tries to do an ability but can't

- replace all instances of 60 with an fps constant duhdoy

- REFACTOR
	- character abilities can be more standardized.
		- mostRecentUse 
		- cooldowns
		- bufferable
		- resource meter
		- serialization

- game end first-to-x ui & implementation

- goal animation

- crunchy animations:
	- contacts should probably glow (lighting on walls & objects) & spark (particle effects)
	- screen shake?

- display netplay stats (with polling intervals, perchance)
	- try testing without polling intervals

- curved walls
	- just jack up the border-radius on a hollow rectangle? is that possible?
	- polylines or https://rapier.rs/docs/user_guides/javascript/colliders/#heightfields
	- research: HTML canvas drawing methods for this

- combine control stick inputs and keyboard WASD inputs more automatically

- control config menu
	- can maybe be extended to be a HUD tutorial display as well
	- eventually should have specialized instructions for each bindable control for each character.
	- localStorage??

- think about name
	- tab title https://nextjs.org/docs/api-reference/next/head

- research: deal with stalling better
	- for one, we could display netplay errors & prompt a restart
	- game should not stall... at all. ie the clock should just keep ticking while stalled
	- ^ maybe only possible with authoratative server..
		-BUT what would it even look like to NOT stall on a server?
			- I promised myself it would be an easy p2p->sever port
				- therefore it must be easy to do p2p stall handling assuming host's machine doesn't stall..

- cpu players

- sentry reporting

//////////////////
LOW PRIORITY
//////////////////

- matchmaking server w/ rooms
- think about: character,stage,cpu select
	- COULD I INCORPORATE PHYSICS TWEAKING IN HERE SOMEHOW
- multiplayer hash as myGame param
	- requires some refactoring.
	- would allow joining game differently (via pause menu)
- convert to simpler configged inputs BEFORE input serialization
	- no reason to at the moment? How costly is it.
	- is there actually any advantage?
		- yeah cuz rn we need both clients to know each others' input config & apply it after deserialization
			- that's whack.
- small input delay
	- https://github.com/rameshvarun/netplayjs/issues/27
- research: how bad is p2p.
	- is it exploitable in any way? Does the host have an advantage?
		- theoretically. But it would be hard to do in a subtle way
		- redux dev config would be a funny backdoor 
	- are there any actual advantages to the server-of-truth approach?
	- how difficult would it be to port to server-of-truth?
	- what is the tech debt of sticking with p2p? methinks not very high?

